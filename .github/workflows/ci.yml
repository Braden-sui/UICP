# CI workflow enforces lint, tests, security scans, and build gates.
name: CI

on:
  push:
    branches:
      - main
      - feature/**
    paths-ignore:
      - 'docs/**'
      - 'uicp/docs/**'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'uicp/docs/**'
      - '**/*.md'

env:
  STRICT_MODULES_VERIFY: "true"
  UICP_MODULES_PUBKEY: ih4HBWNN6fqiMx8ee5NICPwDUzu/4ORtUjo7OTVu4wg=

permissions:
  actions: write
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Web Suite
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      RUN_E2E: false
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903
        with:
          node-version: '20.19.5'
          cache: pnpm
          cache-dependency-path: uicp/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@c5ba7f7862a0f64c1b1a05fbac13e0b8e86ba08c
        with:
          version: 9.0.0

      - name: Create .env for tests
        working-directory: uicp
        run: |
          printf "E2E_ORCHESTRATOR=0\n" > .env
          printf "VITE_MOCK_MODE=true\n" >> .env
          printf "USE_DIRECT_CLOUD=0\n" >> .env
          printf "PLANNER_MODEL=deepseek-v3.1:671b\n" >> .env
          printf "ACTOR_MODEL=qwen3-coder:480b\n" >> .env

      - name: Install dependencies (no scripts)
        working-directory: uicp
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Postinstall (whitelisted)
        working-directory: uicp
        run: pnpm run postinstall

      - name: Lint
        working-directory: uicp
        run: pnpm run lint

      - name: Typecheck
        working-directory: uicp
        run: pnpm run typecheck

      - name: Unit tests
        working-directory: uicp
        run: pnpm run test

      - name: Build
        working-directory: uicp
        run: pnpm run build

      # Link checks intentionally disabled for living docs

      - name: Install Playwright browsers
        if: ${{ env.RUN_E2E == 'true' }}
        working-directory: uicp
        run: pnpm exec playwright install --with-deps

      - name: E2E tests
        if: ${{ env.RUN_E2E == 'true' }}
        working-directory: uicp
        run: pnpm run test:e2e

      - name: Generate SBOM (CycloneDX)
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        continue-on-error: true
        uses: anchore/sbom-action@24b0d5238516480139aa8bc6f92eeb7b54a9eb0a
        with:
          path: .
          format: cyclonedx-json
          # Explicit filename and unique artifact name to satisfy upload-artifact rules
          output-file: sbom.cyclonedx.json
          upload-artifact: true
          artifact-name: sbom-cyclonedx-${{ github.run_id }}

      - name: Trivy scan (filesystem)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          scan-type: fs
          scan-ref: .
          vuln-type: 'os,library'
          format: table
          exit-code: '1'
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Secrets scan (gitleaks)
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7
        with:
          args: detect --redact --no-git -v

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: uicp-build
          path: |
            uicp/dist

  rust-tests:
    name: Rust Suite
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Install GTK dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libgirepository1.0-dev libcairo2-dev libpango1.0-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a
        with:
          workspaces: |
            uicp/src-tauri

      - name: Run Rust tests (integration + harness)
        working-directory: uicp/src-tauri
        run: cargo test --all-targets --locked --verbose

  rust-compute-build:
    name: Rust Compute (wasm_compute)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Install GTK dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libgirepository1.0-dev libcairo2-dev libpango1.0-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a
        with:
          workspaces: |
            uicp/src-tauri

      - name: Cargo check with features (compute)
        working-directory: uicp/src-tauri
        run: |
          cargo check --no-default-features --features wasm_compute,uicp_wasi_enable --locked --verbose

      - name: Build (compute features)
        working-directory: uicp/src-tauri
        run: |
          cargo build --no-default-features --features wasm_compute,uicp_wasi_enable --locked --verbose

  rust-release-boundary:
    name: Verify Test/Runtime Boundary
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Install GTK dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libgirepository1.0-dev libcairo2-dev libpango1.0-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a
        with:
          workspaces: |
            uicp/src-tauri

      - name: Build release binary (no test features)
        working-directory: uicp/src-tauri
        run: |
          cargo build --release --no-default-features --locked --verbose

      - name: Verify test symbols excluded
        working-directory: uicp/src-tauri
        run: |
          # INVARIANT: Release binary must not contain test infrastructure symbols
          # This proves cfg(test) and cfg(feature = "compute_harness") gates work correctly
          binary="target/release/uicp"
          
          echo "Checking for test symbol leakage in release binary..."
          
          # Extract symbol table (nm outputs: address type name)
          # Filter for test_support module symbols
          if nm "$binary" 2>/dev/null | grep -i "test_support\|ComputeTestHarness" | grep -v "RUST_MIN_STACK"; then
            echo "ERROR: Test symbols found in release binary!"
            echo "The test/runtime boundary is violated - test infrastructure leaked into production."
            exit 1
          fi
          
          # Also check for harness feature gate leaks
          if nm "$binary" 2>/dev/null | grep -i "compute_harness" | grep -v "RUST_MIN_STACK"; then
            echo "ERROR: Harness symbols found in release binary!"
            exit 1
          fi
          
          echo "âœ“ Release binary clean - no test symbols detected"
          
          # Report binary size for monitoring bloat
          size_bytes=$(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary")
          size_mb=$((size_bytes / 1024 / 1024))
          echo "Release binary size: ${size_mb}MB"
