package uicp:host@1.0.0;

/// Control and coordination with the host.
interface control {
  // Use the output-stream type from wasi:io/streams at version 0.2.8
  use wasi:io/streams@0.2.8.{output-stream};
  /// Open an output stream for partial, structured updates.
  /// The host may apply backpressure; see semantics.
  open-partial-sink: func(job: string) -> own<output-stream>;

  /// Cooperative cancellation signal. Return true if the job should
  /// begin graceful shutdown. Host may still hard-stop after the deadline.
  should-cancel: func(job: string) -> bool;

  /// Return the total wall-clock budget (ms) that the host granted this job.
  /// Deterministic, constant for the job lifetime.
  deadline-ms: func(job: string) -> u32;

  /// Return remaining wall-clock budget (ms) at call time.
  /// Decreases to 0; may return 0 before a hard stop to let the guest exit cleanly.
  remaining-ms: func(job: string) -> u32;
}

/// Deterministic random values (seeded by host per job).
/// Replay of the same job yields the same sequence.
interface rng {
  /// Next 64-bit value from the job-scoped PRNG.
  next-u64: func(job: string) -> u64;
  /// Fill a buffer with pseudorandom bytes.
  fill: func(job: string, len: u32) -> list<u8>;
}

// legacy logger/clock interfaces removed; use standard WASI logging/clocks

/// System-level functions available to guests.
world system {
  import wasi:io/streams@0.2.8;
  import wasi:clocks/monotonic-clock@0.2.0;
  import wasi:logging/logging@0.2.0;
  import control;
  import rng;
}

